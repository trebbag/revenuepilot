name: CI
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      REVENUEPILOT_SKIP_PACKAGED: 1
      DB_POOL_SIZE: 5
      DB_MAX_OVERFLOW: 10
      STATEMENT_TIMEOUT_MS: 30000
      PGCONNECT_TIMEOUT: 10
      REVENUEPILOT_DB_PATH: ${{ github.workspace }}/.tmp/ci.db
      RUN_PG_TESTS: ${{ vars.RUN_PG_TESTS || '0' }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: revenuepilot
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Node"
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: "Node install/lint/test with coverage"
        if: hashFiles('package.json') != ''
        run: |
          npm ci
          npm run lint --if-present
          npm run test:coverage --if-present -- --ci
      - name: "Install Playwright browsers"
        if: hashFiles('playwright.config.ts') != ''
        run: npx playwright install --with-deps chromium
      - name: "Run accessibility regression tests"
        if: hashFiles('playwright.config.ts') != ''
        run: npm run test:e2e -- tests/e2e/accessibility.spec.ts
      - name: "Store JS coverage summary"
        if: hashFiles('package.json') != ''
        run: |
          mkdir -p coverage
          if [ -f coverage/coverage-summary.json ]; then \
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json); \
            echo "JS lines coverage: $LINES"; \
            jq -n --argjson pct "$LINES" '{schemaVersion:1,label:"JS Coverage",message:($pct|tostring)+"%",color:( ($pct>=80)?"green":($pct>=60?"yellow":"red"))}' > coverage/js-coverage.json; \
            if [ "$(echo "$LINES < 80" | bc)" -eq 1 ]; then echo "JS coverage below 80% ($LINES)" && exit 1; fi; \
          fi

      - name: "Setup Python"
        if: hashFiles('backend/requirements.txt') != ''
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: "Python install deps"
        if: hashFiles('backend/requirements.txt') != ''
        run: |
          pip install -r backend/requirements_dev.txt
      - name: "Python lint & test with coverage"
        if: hashFiles('backend/requirements.txt') != ''
        run: |
          mkdir -p .tmp
          python -m alembic -c backend/alembic/alembic.ini upgrade head
          python -m alembic -c backend/alembic/alembic.ini check
          pytest --maxfail=1 --disable-warnings -q --cov=backend --cov-report=term --cov-report=json:coverage/python-coverage-raw.json
          if command -v flake8; then flake8 backend; fi
      - name: "PostgreSQL migrations & smoke tests"
        if: env.RUN_PG_TESTS == '1'
        env:
          TEST_DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/revenuepilot
          DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/revenuepilot
          REVENUEPILOT_DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/revenuepilot
          RUN_PG_TESTS: 1
        run: |
          python -m alembic -c backend/alembic/alembic.ini upgrade head
          python -m alembic -c backend/alembic/alembic.ini check
          pytest -m postgres --maxfail=1 --disable-warnings -q
      - name: "Build Python coverage badge + enforce threshold"
        if: hashFiles('backend/requirements.txt') != ''
        run: |
          mkdir -p coverage
          TOTAL=$(python -c "import json;d=json.load(open('coverage/python-coverage-raw.json'));print(d.get('totals',{}).get('percent_covered', (d['meta']['covered_lines']/d['meta']['num_statements']*100 if d['meta']['num_statements'] else 0)) if 'meta' in d else 0)")
          echo "Python coverage: $TOTAL"
          export TOTAL
          python -c "import json,os,sys; pct=float(os.environ['TOTAL']); color='green' if pct>=80 else 'yellow' if pct>=60 else 'red'; json.dump({'schemaVersion':1,'label':'Python Coverage','message':f'{pct:.1f}%','color':color}, open('coverage/python-coverage.json','w')); sys.exit(0 if pct>=80 else 1)"
      - name: "Upload coverage artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
